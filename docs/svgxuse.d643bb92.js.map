{"version":3,"sources":["node_modules/svgxuse/svgxuse.js"],"names":[],"mappings":"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","file":"svgxuse.d643bb92.js","sourceRoot":"..","sourcesContent":["/*!\n * @copyright Copyright (c) 2017 IcoMoon.io\n * @license   Licensed under MIT license\n *            See https://github.com/Keyamoon/svgxuse\n * @version   1.2.6\n */\n/*jslint browser: true */\n/*global XDomainRequest, MutationObserver, window */\n(function () {\n    \"use strict\";\n    if (typeof window !== \"undefined\" && window.addEventListener) {\n        var cache = Object.create(null); // holds xhr objects to prevent multiple requests\n        var checkUseElems;\n        var tid; // timeout id\n        var debouncedCheck = function () {\n            clearTimeout(tid);\n            tid = setTimeout(checkUseElems, 100);\n        };\n        var unobserveChanges = function () {\n            return;\n        };\n        var observeChanges = function () {\n            var observer;\n            window.addEventListener(\"resize\", debouncedCheck, false);\n            window.addEventListener(\"orientationchange\", debouncedCheck, false);\n            if (window.MutationObserver) {\n                observer = new MutationObserver(debouncedCheck);\n                observer.observe(document.documentElement, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true\n                });\n                unobserveChanges = function () {\n                    try {\n                        observer.disconnect();\n                        window.removeEventListener(\"resize\", debouncedCheck, false);\n                        window.removeEventListener(\"orientationchange\", debouncedCheck, false);\n                    } catch (ignore) {}\n                };\n            } else {\n                document.documentElement.addEventListener(\"DOMSubtreeModified\", debouncedCheck, false);\n                unobserveChanges = function () {\n                    document.documentElement.removeEventListener(\"DOMSubtreeModified\", debouncedCheck, false);\n                    window.removeEventListener(\"resize\", debouncedCheck, false);\n                    window.removeEventListener(\"orientationchange\", debouncedCheck, false);\n                };\n            }\n        };\n        var createRequest = function (url) {\n            // In IE 9, cross origin requests can only be sent using XDomainRequest.\n            // XDomainRequest would fail if CORS headers are not set.\n            // Therefore, XDomainRequest should only be used with cross origin requests.\n            function getOrigin(loc) {\n                var a;\n                if (loc.protocol !== undefined) {\n                    a = loc;\n                } else {\n                    a = document.createElement(\"a\");\n                    a.href = loc;\n                }\n                return a.protocol.replace(/:/g, \"\") + a.host;\n            }\n            var Request;\n            var origin;\n            var origin2;\n            if (window.XMLHttpRequest) {\n                Request = new XMLHttpRequest();\n                origin = getOrigin(location);\n                origin2 = getOrigin(url);\n                if (Request.withCredentials === undefined && origin2 !== \"\" && origin2 !== origin) {\n                    Request = XDomainRequest || undefined;\n                } else {\n                    Request = XMLHttpRequest;\n                }\n            }\n            return Request;\n        };\n        var xlinkNS = \"http://www.w3.org/1999/xlink\";\n        checkUseElems = function () {\n            var base;\n            var bcr;\n            var fallback = \"\"; // optional fallback URL in case no base path to SVG file was given and no symbol definition was found.\n            var hash;\n            var href;\n            var i;\n            var inProgressCount = 0;\n            var isHidden;\n            var Request;\n            var url;\n            var uses;\n            var xhr;\n            function observeIfDone() {\n                // If done with making changes, start watching for chagnes in DOM again\n                inProgressCount -= 1;\n                if (inProgressCount === 0) { // if all xhrs were resolved\n                    unobserveChanges(); // make sure to remove old handlers\n                    observeChanges(); // watch for changes to DOM\n                }\n            }\n            function attrUpdateFunc(spec) {\n                return function () {\n                    if (cache[spec.base] !== true) {\n                        spec.useEl.setAttributeNS(xlinkNS, \"xlink:href\", \"#\" + spec.hash);\n                        if (spec.useEl.hasAttribute(\"href\")) {\n                            spec.useEl.setAttribute(\"href\", \"#\" + spec.hash);\n                        }\n                    }\n                };\n            }\n            function onloadFunc(xhr) {\n                return function () {\n                    var body = document.body;\n                    var x = document.createElement(\"x\");\n                    var svg;\n                    xhr.onload = null;\n                    x.innerHTML = xhr.responseText;\n                    svg = x.getElementsByTagName(\"svg\")[0];\n                    if (svg) {\n                        svg.setAttribute(\"aria-hidden\", \"true\");\n                        svg.style.position = \"absolute\";\n                        svg.style.width = 0;\n                        svg.style.height = 0;\n                        svg.style.overflow = \"hidden\";\n                        body.insertBefore(svg, body.firstChild);\n                    }\n                    observeIfDone();\n                };\n            }\n            function onErrorTimeout(xhr) {\n                return function () {\n                    xhr.onerror = null;\n                    xhr.ontimeout = null;\n                    observeIfDone();\n                };\n            }\n            unobserveChanges(); // stop watching for changes to DOM\n            // find all use elements\n            uses = document.getElementsByTagName(\"use\");\n            for (i = 0; i < uses.length; i += 1) {\n                try {\n                    bcr = uses[i].getBoundingClientRect();\n                } catch (ignore) {\n                    // failed to get bounding rectangle of the use element\n                    bcr = false;\n                }\n                href = uses[i].getAttribute(\"href\")\n                        || uses[i].getAttributeNS(xlinkNS, \"href\")\n                        || uses[i].getAttribute(\"xlink:href\");\n                if (href && href.split) {\n                    url = href.split(\"#\");\n                } else {\n                    url = [\"\", \"\"];\n                }\n                base = url[0];\n                hash = url[1];\n                isHidden = bcr && bcr.left === 0 && bcr.right === 0 && bcr.top === 0 && bcr.bottom === 0;\n                if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {\n                    // the use element is empty\n                    // if there is a reference to an external SVG, try to fetch it\n                    // use the optional fallback URL if there is no reference to an external SVG\n                    if (fallback && !base.length && hash && !document.getElementById(hash)) {\n                        base = fallback;\n                    }\n                    if (uses[i].hasAttribute(\"href\")) {\n                        uses[i].setAttributeNS(xlinkNS, \"xlink:href\", href);\n                    }\n                    if (base.length) {\n                        // schedule updating xlink:href\n                        xhr = cache[base];\n                        if (xhr !== true) {\n                            // true signifies that prepending the SVG was not required\n                            setTimeout(attrUpdateFunc({\n                                useEl: uses[i],\n                                base: base,\n                                hash: hash\n                            }), 0);\n                        }\n                        if (xhr === undefined) {\n                            Request = createRequest(base);\n                            if (Request !== undefined) {\n                                xhr = new Request();\n                                cache[base] = xhr;\n                                xhr.onload = onloadFunc(xhr);\n                                xhr.onerror = onErrorTimeout(xhr);\n                                xhr.ontimeout = onErrorTimeout(xhr);\n                                xhr.open(\"GET\", base);\n                                xhr.send();\n                                inProgressCount += 1;\n                            }\n                        }\n                    }\n                } else {\n                    if (!isHidden) {\n                        if (cache[base] === undefined) {\n                            // remember this URL if the use element was not empty and no request was sent\n                            cache[base] = true;\n                        } else if (cache[base].onload) {\n                            // if it turns out that prepending the SVG is not necessary,\n                            // abort the in-progress xhr.\n                            cache[base].abort();\n                            delete cache[base].onload;\n                            cache[base] = true;\n                        }\n                    } else if (base.length && cache[base]) {\n                        setTimeout(attrUpdateFunc({\n                            useEl: uses[i],\n                            base: base,\n                            hash: hash\n                        }), 0);\n                    }\n                }\n            }\n            uses = \"\";\n            inProgressCount += 1;\n            observeIfDone();\n        };\n        var winLoad;\n        winLoad = function () {\n            window.removeEventListener(\"load\", winLoad, false); // to prevent memory leaks\n            tid = setTimeout(checkUseElems, 0);\n        };\n        if (document.readyState !== \"complete\") {\n            // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.\n            window.addEventListener(\"load\", winLoad, false);\n        } else {\n            // No need to add a listener if the document is already loaded, initialize immediately.\n            winLoad();\n        }\n    }\n}());\n"]}